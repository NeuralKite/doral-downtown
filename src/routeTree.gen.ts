/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as BusinessIndexRouteImport } from './routes/business/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AuthVerifyEmailRouteImport } from './routes/auth/verify-email'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthOnboardingRouteImport } from './routes/auth/onboarding'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthConfirmRouteImport } from './routes/auth/confirm'
import { Route as AdminNewsNewRouteImport } from './routes/admin/news/new'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRouteImport,
} as any)
const BusinessIndexRoute = BusinessIndexRouteImport.update({
  id: '/business/',
  path: '/business/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthVerifyEmailRoute = AuthVerifyEmailRouteImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthOnboardingRoute = AuthOnboardingRouteImport.update({
  id: '/auth/onboarding',
  path: '/auth/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthConfirmRoute = AuthConfirmRouteImport.update({
  id: '/auth/confirm',
  path: '/auth/confirm',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminNewsNewRoute = AdminNewsNewRouteImport.update({
  id: '/admin/news/new',
  path: '/admin/news/new',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/confirm': typeof AuthConfirmRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/onboarding': typeof AuthOnboardingRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin': typeof AdminIndexRoute
  '/business': typeof BusinessIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/admin/news/new': typeof AdminNewsNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/confirm': typeof AuthConfirmRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/onboarding': typeof AuthOnboardingRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin': typeof AdminIndexRoute
  '/business': typeof BusinessIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/admin/news/new': typeof AdminNewsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/confirm': typeof AuthConfirmRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/onboarding': typeof AuthOnboardingRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/admin/': typeof AdminIndexRoute
  '/business/': typeof BusinessIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/admin/news/new': typeof AdminNewsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/confirm'
    | '/auth/login'
    | '/auth/onboarding'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin'
    | '/business'
    | '/profile'
    | '/admin/news/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/confirm'
    | '/auth/login'
    | '/auth/onboarding'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin'
    | '/business'
    | '/profile'
    | '/admin/news/new'
  id:
    | '__root__'
    | '/'
    | '/auth/confirm'
    | '/auth/login'
    | '/auth/onboarding'
    | '/auth/register'
    | '/auth/verify-email'
    | '/admin/'
    | '/business/'
    | '/profile/'
    | '/admin/news/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthConfirmRoute: typeof AuthConfirmRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthOnboardingRoute: typeof AuthOnboardingRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
  AdminIndexRoute: typeof AdminIndexRoute
  BusinessIndexRoute: typeof BusinessIndexRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
  AdminNewsNewRoute: typeof AdminNewsNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/business/': {
      id: '/business/'
      path: '/business'
      fullPath: '/business'
      preLoaderRoute: typeof BusinessIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/onboarding': {
      id: '/auth/onboarding'
      path: '/auth/onboarding'
      fullPath: '/auth/onboarding'
      preLoaderRoute: typeof AuthOnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/confirm': {
      id: '/auth/confirm'
      path: '/auth/confirm'
      fullPath: '/auth/confirm'
      preLoaderRoute: typeof AuthConfirmRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/news/new': {
      id: '/admin/news/new'
      path: '/admin/news/new'
      fullPath: '/admin/news/new'
      preLoaderRoute: typeof AdminNewsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthConfirmRoute: AuthConfirmRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthOnboardingRoute: AuthOnboardingRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
  AdminIndexRoute: AdminIndexRoute,
  BusinessIndexRoute: BusinessIndexRoute,
  ProfileIndexRoute: ProfileIndexRoute,
  AdminNewsNewRoute: AdminNewsNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
